#include <stdlib.h>
#include <stdio.h>

/* 
   1   data[] 元素数组，不用移动数据， 通过pd索引堆即可以实现堆序访问。
   
   2   pd[]  索引堆，保存的value不是堆序关键字，但是可以通过value得到关键字。
       index: 堆序 1 的key 要大于 2 3 的key
       value: 数据的索引index，用pd的value来索引数据获得关键字 形成堆优先性

   3   map[] 数据index反向索引pd
       当data数据改变时，pd索引堆，并不会知道哪个元素被改变了，所以就无法进行fixup fixdown。 因为pd保存了 data的索引， 但是当data数据改变时，pd并不知道。 所以就需要有人通知pd它的哪个关键字值改变了。 即 data －map－ pd 再反向映射到pd，通知pd关键字的改变。
       index：data元素的index data－map
       value：保存的pd的索引，data如果某个元素 data[i] 发生改变 通过k ＝ map[i]即可得到需要 pd[k] 需要堆化。

    堆（heap）是一种常见的数据结构，经常用来实现优先队列。其中最常见的是二叉堆（binary heap）。由于它特殊的性质（二叉满树）所以可以用数组高效的实现。
    堆还能用来进行排序，堆排序（heap sort）具有快速（复杂度O(N * logN)），稳定的特点，尤其是非常稳定，因此适用于某些需要排序稳定性的场合。
    
But，普通的二叉堆有两个缺陷：
    1，在堆中的元素体积非常大的情况下，经常性的移动元素是低效的。
    2，如果在堆的使用过程中，堆中的元素的值要改变，则普通堆对此无能为力。简单的说，一个元素如果进入堆之后，它的值就不能改变了，否则会影响堆的性质。
    第一个缺陷还能用类似指针排序的技术解决，但是第二个缺陷不采用特殊的技术是没办法解决的。然而在一些场合，堆中元素的值确实需要改变。因此索引堆（index heap）闪亮登场~~
    所谓索引堆，简单地说，就是在堆里头存放的不是数据，而是数据所在数组的索引，也就是下标（本文中索引和下标是一个意思，互相换用），
    根据数据的某种优先级来调整各个元素对应的下标在堆中的位置。本质上来说索引堆也是堆，提供堆的接口。由于索引堆最终用来实现优先队列，所以又可以叫索引优先队列（index priority queue）。接下来就说明索引堆的实现，以及为什么索引堆能解决刚才说的两个缺陷。
    -----------------------索引堆如何实现？------------------------

    因为索引堆也是堆，所以其实只要实现了上滤（fix up）和下滤（fix down），基本上就实现了整个堆。
    但是索引堆建立了两重映射，所以实现上滤和下滤的时候必须小心翼翼，否则很容易出错。注意到一个索引经过两次映射之后会映射回自己，即
    pq[map[i]] = map[pq[i]] = i
    这个性质很重要，因为这是保证索引堆有效的条件。必须满足这一点，索引堆才能正常使用。因此上滤和下滤的过程中，除了要保证堆本身的性质，还必须保证索引的性质。只要满足了这两个性质，程序就是正确的。

    http://blog.sina.com.cn/s/blog_4dff87120100su10.html
*/

#define Parent(x) x/2
#define LeftChild(x) 2*x
#define RightChild(x) 2*x+1

static int N= 0;
static int *pq;
static int *map;

/*
  用于确定数据优先级的函数，我在这里将实现留给索引堆的用户，
  这样可以保证最大程度的灵活性，即对于任何数据，索引堆不关心数据本身，只关心数据之间的优先级,这里的i和j是数据数组（data）的下标，也就是pq中要存放的索引.
*/

int Priority(int i, int j);

//向上堆化 
/*找到父节点，进行比较(Priority(i, parent)), 判断是否进行交还, 堆序 索引数组 */
void fixUp(int i){
  int curr, parent, index = pq[i];
  /* 1 curr parent
     2 条件：
        1 parent >= 1  索引数组从1开始的。   必需要大于
        2 Priority(curindex, parentindex) 关键字值大，才进行堆化
     3 进行 parent 作为当前需要向上堆化。parent的parent就是下一个
   */
  for(curr = i, parent = Parent(i); 
      parent >= 1 && Priority(index, pq[parent]);
      curr = parent, parent = Parent(parent)){
    /*  */
    pq[curr] = pq[parent];
    map[pq[curr]] = curr;
  }
}


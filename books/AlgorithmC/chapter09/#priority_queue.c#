#include "priority_queue.h"

static Item* pri_queue;
static int N;

void pri_queue_init(int maxN){
    pri_queue = malloc(maxN*sizeof(Item));
    
    N = 0;
}

int pri_queue_empty(){
    return N == 0;
}

void pri_queue_insert(Item item){
    pri_queue[N++] = item;
}

Item pri_queue_delmax(){
    int i;
    int maxI = 0;
    for(i = 0; i < N; i++){
        if(less(pri_queue[maxI], pri_queue[i])){
            maxI = i;
        }
    }
    exch(pri_queue[maxI], pri_queue[N-1]);
    return pri_queue[--N];
}
/*
//我们可以选择使用有序 或者 无序 序列 来 作为链表或数组的实现.
//在保证数据项有序或者无序 之间做权衡,
//当希望插入需要常量时间时, 无序满足要求, 但是delmax就会需要遍历 如上.
// 无序序列是懒方法, 当需要时才做
//当希望delmax需要常量时间时, 有序满足要求, 但是insert就会需要遍历时间.
// 有序序列是良性方法, 提前处理以后需要的做的事.
// 任何时候都可以选择使用数组 或者 链表实现, 并作出基本权衡.
*/


